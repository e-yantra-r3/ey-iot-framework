{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"e-Yantra IoT Framework Project Overview Our project, 'e-Yantra IoT Framework' attempts on creating a framework specifically designed to carry out IoT based applications with ease and without much hassle. So, what makes this framework unique! For starters, the entire framework is based on tools and services which are available for free which in turn make this framework completely free. Event Driven Programming In this framework emphasis is given on Event-Driven Programming over Sequential Programming. This is because, IoT applications are an event driven system and using sequential programming techniques to develop event driven systems is hard and does not make much sense. The framework consists of APIs which users can use in the code as per their need. All the user will have to do is to write user defined functions and attach it to the set of events defined in the framework. So, whenever any IoT event occurs the user defined function attached to that event will be executed automatically without having the user call the function explicitly in main() or elsewhere. Further information and usage details of these APIs will be discussed in the further sections in depth. Why use eY IoT Framework? There are frameworks like Azure IoT, AWS IoT, etc already designed for similar IoT based applications but what makes this framework stand apart from them is the fact that since this framework is entirely based on free tools and services it itself becomes free for use . On the other hand, the existing frameworks offer paid services. Secondly, people who are just starting out in the IoT field are already unfamiliar with many concepts and are in the learning phase. At that time if they are made to get acquaint with frameworks having steep learning curves , that in itself can act as a demotivation . This framework uses tools which many may have already used apart from IoT applications like Github and Google Spreadsheet. Usage of such tools and overall design makes this framework very user-friendly and simple ! So with this free, easy to use framework we wish to ease out on your load while developing IoT applications and we hope it fulfils this purpose with a great deal of satisfaction! :) Technology Stack The tools and services we have used in the framework are as follows: Google Spreadsheet as database. Google App Scripting for generating alert notifications. HiveMQ, a public MQTT server. Github is used to store firmware on cloud to perform remote OTA. Public NTP server pool.ntp.org for timekeeping. ip-api.com for IP based Geo-location. So, what activities will a user be able to carry out with this developed framework. Let's take a look... Database: Google Sheets An ESP32 based endpoint like eYFi-Mega, connected to the internet can directly push sensor data to Google Spreadsheet using this framework. Google Sheets has upper limit of 5 Million rows. So, if you are logging sensor data at an interval of 1 minute then Google Sheets will allow you to log data for 9 years !! Google Sheets is very powerful tool which can allow user to make sense out of their IoT Data which is also a crucial part of IoT. Alert Notifications: Google Apps Scripting The framework offers a facility of alerting the user via an e-mail if the sensor readings exceed a certain pre-defined threshold. Our Google Apps Script attached to Google Sheets makes this happen. IoT Dashboard: Highcharts A dynamic graph of the readings with their time of update gets created automatically, in the spreadsheet itself, by following the framework procedures. Remote OTA: Github Perform Remote OTA by fetching firmware from Github. There are two main reason for choosing Github over other free services for storing firmware Github is tightly integrated with modern software development workflow. So user using this framework can have source code and binary file of the firmware at one place. Github provides static URL for files. So, even after you update the firmware file on GitHub its URL will stay the same. Timekeeping: Public NTP Servers Syncing internal clock with NTP server clock for timekeeping. NTP as you know stands for Network Time Protocol which is a networking protocol for clock synchronization between computer systems. Using this framework you just have to use one line of code to sync internal clock of your IoT device with NTP server time. Location: IP Geo-location In the framework we are using free IP Geo-location service from ip-api.com for location estimation of IoT Device. Using this, IoT device can roughly estimate its location without the need of any specialised GPS hardware connected to it.","title":"Introduction"},{"location":"#project-overview","text":"Our project, 'e-Yantra IoT Framework' attempts on creating a framework specifically designed to carry out IoT based applications with ease and without much hassle. So, what makes this framework unique! For starters, the entire framework is based on tools and services which are available for free which in turn make this framework completely free.","title":"Project Overview"},{"location":"#event-driven-programming","text":"In this framework emphasis is given on Event-Driven Programming over Sequential Programming. This is because, IoT applications are an event driven system and using sequential programming techniques to develop event driven systems is hard and does not make much sense. The framework consists of APIs which users can use in the code as per their need. All the user will have to do is to write user defined functions and attach it to the set of events defined in the framework. So, whenever any IoT event occurs the user defined function attached to that event will be executed automatically without having the user call the function explicitly in main() or elsewhere. Further information and usage details of these APIs will be discussed in the further sections in depth.","title":"Event Driven Programming"},{"location":"#why-use-ey-iot-framework","text":"There are frameworks like Azure IoT, AWS IoT, etc already designed for similar IoT based applications but what makes this framework stand apart from them is the fact that since this framework is entirely based on free tools and services it itself becomes free for use . On the other hand, the existing frameworks offer paid services. Secondly, people who are just starting out in the IoT field are already unfamiliar with many concepts and are in the learning phase. At that time if they are made to get acquaint with frameworks having steep learning curves , that in itself can act as a demotivation . This framework uses tools which many may have already used apart from IoT applications like Github and Google Spreadsheet. Usage of such tools and overall design makes this framework very user-friendly and simple ! So with this free, easy to use framework we wish to ease out on your load while developing IoT applications and we hope it fulfils this purpose with a great deal of satisfaction! :)","title":"Why use eY IoT Framework?"},{"location":"#technology-stack","text":"The tools and services we have used in the framework are as follows: Google Spreadsheet as database. Google App Scripting for generating alert notifications. HiveMQ, a public MQTT server. Github is used to store firmware on cloud to perform remote OTA. Public NTP server pool.ntp.org for timekeeping. ip-api.com for IP based Geo-location. So, what activities will a user be able to carry out with this developed framework. Let's take a look...","title":"Technology Stack"},{"location":"#database-google-sheets","text":"An ESP32 based endpoint like eYFi-Mega, connected to the internet can directly push sensor data to Google Spreadsheet using this framework. Google Sheets has upper limit of 5 Million rows. So, if you are logging sensor data at an interval of 1 minute then Google Sheets will allow you to log data for 9 years !! Google Sheets is very powerful tool which can allow user to make sense out of their IoT Data which is also a crucial part of IoT.","title":"Database: Google Sheets"},{"location":"#alert-notifications-google-apps-scripting","text":"The framework offers a facility of alerting the user via an e-mail if the sensor readings exceed a certain pre-defined threshold. Our Google Apps Script attached to Google Sheets makes this happen.","title":"Alert Notifications: Google Apps Scripting"},{"location":"#iot-dashboard-highcharts","text":"A dynamic graph of the readings with their time of update gets created automatically, in the spreadsheet itself, by following the framework procedures.","title":"IoT Dashboard: Highcharts"},{"location":"#remote-ota-github","text":"Perform Remote OTA by fetching firmware from Github. There are two main reason for choosing Github over other free services for storing firmware Github is tightly integrated with modern software development workflow. So user using this framework can have source code and binary file of the firmware at one place. Github provides static URL for files. So, even after you update the firmware file on GitHub its URL will stay the same.","title":"Remote OTA: Github"},{"location":"#timekeeping-public-ntp-servers","text":"Syncing internal clock with NTP server clock for timekeeping. NTP as you know stands for Network Time Protocol which is a networking protocol for clock synchronization between computer systems. Using this framework you just have to use one line of code to sync internal clock of your IoT device with NTP server time.","title":"Timekeeping: Public NTP Servers"},{"location":"#location-ip-geo-location","text":"In the framework we are using free IP Geo-location service from ip-api.com for location estimation of IoT Device. Using this, IoT device can roughly estimate its location without the need of any specialised GPS hardware connected to it.","title":"Location: IP Geo-location"},{"location":"APIs/","text":"APIs Our framework consists of APIs which users can use in the code as per their need. All the user will have to do is include these function in the code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. So, below mentioned are the APIs that users can use to get their work done . Wi-Fi void ey_init_wifi_sta(char str_ssid[], char str_pass[]) This API is used to connect to an existing Wi-Fi network. You must be having a Wi-Fi hotspot to which you want your esp to be connected. For Wi-Fi security, WPA/WPA2 on an existing Wi-Fi network is used. Since we are using WPA/WPA2 authentication mode, this function takes SSID name and SSID key of your Wi-Fi network in order to join to this Wi-Fi network. Parameters: str_ssid[] = SSID name of your Wi-Fi network str_pass[] = SSID password of your Wi-Fi network void ey_wifi_auto_reconnect(void) Your esp may be disconnected from your Wi-Fi network due to many reasons, e.g. the connected AP is restarted etc. It's the application's responsibility to do the reconnect. So , you can use this API to auto reconnect to your Wi-Fi network This API internally calls esp_wifi_connect() if your Wi-Fi STA is disconnected. Parameters: None MQTT void ey_mqtt_start(void) This API is used to create an mqtt client handle based on the configuration and starts mqtt client with created client handle. You can set the configuration (which includes MQTT server URL and MQTT server port) in the ey_iot_config.h file Parameters: None int ey_mqtt_publish(char str_topic[], char str_data[], unsigned char qos) This API is used to send a publish message to the broker for a particular topic. Parameters: str_topic[] : array which stores the topic string. str_data[] : array which stores the payload string (set to NULL, sending empty payload message). qos : qos of publish message Return: msg_id of the publish message (for QoS 0 message_id will always be zero) on success, -1 on failure. int ey_mqtt_subscribe(char str_topic[], unsigned char qos); This API is used to subscribe the client to defined topic with defined qos. Parameters: str_topic[] : array which stores the topic string. qos : qos of subscribe message Return: msg_id of the subscribe message on success, -1 on failure. int ey_mqtt_unsubscribe(char str_topic[]); This API is used to unsubscribe the client from defined topic. Parameters: str_topic[] : array which stores the topic string. Return: msg_id of the subscribe message on success, -1 on failure. OTA int ey_ota_start(void); This API is used to start the remote OTA. It allocates HTTPS OTA Firmware upgrade context, establishes HTTPS connection, reads image data from HTTP stream and writes it to OTA partition and finishes HTTPS OTA Firmware upgrade operation. This API supports URL redirection, but if CA cert of URLs differ then it should be appended to cert_pem member of config (defined in function void ey_iot_ota_task(void pvParameter) ). You can define your Remote OTA URL in ey-iot_config.h file. Parameters: None int ey_ota_advanced_start(int ota_mode); \u200b It is used to create the advanced_ota_example with a user defined mode passed as a parameter to the function. Parameter: To start OTA in smart mode pass int ota_mode as 0. To start OTA in forced mode pass int ota_mode as 1. For any other value of int ota_mode forced mode will be activated. Return: Returns 0 on success. Database int ey_push_sensor_data(unsigned char mode, float sensor_value); This API is used to used push one sensor data to your database. Parameters: mode : GOOGLE_SHEET if you are using google Spreadsheets as your database. sensor_value : readings of your sensor. int x_ey_push_sensor_data(unsigned char mode, int number_of_values, ... ); This API is used to push more than one sensor data to your database. Parameters: mode : GOOGLE_SHEET , if you are using google spreadsheets as your database. number_of_values : number of values you wanted to push NTP int ey_init_nvs(void); Initialize the default NVS partition. This API initialises the default NVS partition. The default NVS partition is the one that is labeled \u201cnvs\u201d in the partition table. Return: ESP_OK if storage was successfully initialized. ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated) ESP_ERR_NOT_FOUND if no partition with label \u201cnvs\u201d is found in the partition table one of the error codes from the underlying flash storage driver. void ey_init_ntp(void) It is used to set the system time. It makes 10 retrys and restarts the esp if the system time is not set even after 10th try. time_t ey_sntp_get_epoch(void); This API gets the current system time and checks whether it is set or not. If it is not set then it first initializes SNTP and then tries to set the time following the method in void ey_init_ntp . it restarts the esp module and returns the current set time. Return: It returns the current set system time. char* ey_sntp_date_string(void) This API is used to get the current date and the time string. It returns the date and time through a single character array. The date and time are stored as 'YY-MM-DD HH:MM:SS' in the datestring returned by this function. Return: Returns character array storing value of system date and time in the above mentioned format. Location void ey_populate_isp_location(void) This API is used to fetch information about ISP including its location. Information is received in JSON format. { \"status\": \"success\", \"country\": \"India\", \"countryCode\": \"IN\", \"region\": \"GJ\", \"regionName\": \"Gujarat\", \"city\": \"Ahmedabad\", \"zip\": \"380052\", \"lat\": 23.0276, \"lon\": 72.5871, \"timezone\": \"Asia/Kolkata\", \"isp\": \"Reliance Jio Infocomm Limited\", \"org\": \"RJIL Gujarat LTE SUBSCRIBER PUBLIC\", \"as\": \"AS55836 Reliance Jio Infocomm Limited\", \"query\": \"157.32.130.153\" } This information from the JSON is stored in ey_iot object. ey_iot.isp_country ey_iot.isp_region ey_iot.isp_regionName ey_iot.isp_city ey_iot.isp_zip ey_iot.isp_lat ey_iot.isp_lon ey_iot.isp_timezone ey_iot.isp_org ey_iot.isp_as ey_iot.isp_public_ip","title":"APIs"},{"location":"APIs/#apis","text":"Our framework consists of APIs which users can use in the code as per their need. All the user will have to do is include these function in the code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. So, below mentioned are the APIs that users can use to get their work done .","title":"APIs"},{"location":"APIs/#wi-fi","text":"void ey_init_wifi_sta(char str_ssid[], char str_pass[]) This API is used to connect to an existing Wi-Fi network. You must be having a Wi-Fi hotspot to which you want your esp to be connected. For Wi-Fi security, WPA/WPA2 on an existing Wi-Fi network is used. Since we are using WPA/WPA2 authentication mode, this function takes SSID name and SSID key of your Wi-Fi network in order to join to this Wi-Fi network.","title":"Wi-Fi"},{"location":"APIs/#parameters","text":"str_ssid[] = SSID name of your Wi-Fi network str_pass[] = SSID password of your Wi-Fi network void ey_wifi_auto_reconnect(void) Your esp may be disconnected from your Wi-Fi network due to many reasons, e.g. the connected AP is restarted etc. It's the application's responsibility to do the reconnect. So , you can use this API to auto reconnect to your Wi-Fi network This API internally calls esp_wifi_connect() if your Wi-Fi STA is disconnected.","title":"Parameters:"},{"location":"APIs/#parameters-none","text":"","title":"Parameters: None"},{"location":"APIs/#mqtt","text":"void ey_mqtt_start(void) This API is used to create an mqtt client handle based on the configuration and starts mqtt client with created client handle. You can set the configuration (which includes MQTT server URL and MQTT server port) in the ey_iot_config.h file","title":"MQTT"},{"location":"APIs/#parameters-none_1","text":"int ey_mqtt_publish(char str_topic[], char str_data[], unsigned char qos) This API is used to send a publish message to the broker for a particular topic.","title":"Parameters: None"},{"location":"APIs/#parameters_1","text":"str_topic[] : array which stores the topic string. str_data[] : array which stores the payload string (set to NULL, sending empty payload message). qos : qos of publish message","title":"Parameters:"},{"location":"APIs/#return","text":"msg_id of the publish message (for QoS 0 message_id will always be zero) on success, -1 on failure. int ey_mqtt_subscribe(char str_topic[], unsigned char qos); This API is used to subscribe the client to defined topic with defined qos.","title":"Return:"},{"location":"APIs/#parameters_2","text":"str_topic[] : array which stores the topic string. qos : qos of subscribe message","title":"Parameters:"},{"location":"APIs/#return_1","text":"msg_id of the subscribe message on success, -1 on failure. int ey_mqtt_unsubscribe(char str_topic[]); This API is used to unsubscribe the client from defined topic.","title":"Return:"},{"location":"APIs/#parameters_3","text":"str_topic[] : array which stores the topic string.","title":"Parameters:"},{"location":"APIs/#return_2","text":"msg_id of the subscribe message on success, -1 on failure.","title":"Return:"},{"location":"APIs/#ota","text":"int ey_ota_start(void); This API is used to start the remote OTA. It allocates HTTPS OTA Firmware upgrade context, establishes HTTPS connection, reads image data from HTTP stream and writes it to OTA partition and finishes HTTPS OTA Firmware upgrade operation. This API supports URL redirection, but if CA cert of URLs differ then it should be appended to cert_pem member of config (defined in function void ey_iot_ota_task(void pvParameter) ). You can define your Remote OTA URL in ey-iot_config.h file.","title":"OTA"},{"location":"APIs/#parameters-none_2","text":"int ey_ota_advanced_start(int ota_mode); \u200b It is used to create the advanced_ota_example with a user defined mode passed as a parameter to the function.","title":"Parameters: None"},{"location":"APIs/#parameter","text":"To start OTA in smart mode pass int ota_mode as 0. To start OTA in forced mode pass int ota_mode as 1. For any other value of int ota_mode forced mode will be activated.","title":"Parameter:"},{"location":"APIs/#return_3","text":"Returns 0 on success.","title":"Return:"},{"location":"APIs/#database","text":"int ey_push_sensor_data(unsigned char mode, float sensor_value); This API is used to used push one sensor data to your database.","title":"Database"},{"location":"APIs/#parameters_4","text":"mode : GOOGLE_SHEET if you are using google Spreadsheets as your database. sensor_value : readings of your sensor. int x_ey_push_sensor_data(unsigned char mode, int number_of_values, ... ); This API is used to push more than one sensor data to your database.","title":"Parameters:"},{"location":"APIs/#parameters_5","text":"mode : GOOGLE_SHEET , if you are using google spreadsheets as your database. number_of_values : number of values you wanted to push","title":"Parameters:"},{"location":"APIs/#ntp","text":"int ey_init_nvs(void); Initialize the default NVS partition. This API initialises the default NVS partition. The default NVS partition is the one that is labeled \u201cnvs\u201d in the partition table.","title":"NTP"},{"location":"APIs/#return_4","text":"ESP_OK if storage was successfully initialized. ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated) ESP_ERR_NOT_FOUND if no partition with label \u201cnvs\u201d is found in the partition table one of the error codes from the underlying flash storage driver. void ey_init_ntp(void) It is used to set the system time. It makes 10 retrys and restarts the esp if the system time is not set even after 10th try. time_t ey_sntp_get_epoch(void); This API gets the current system time and checks whether it is set or not. If it is not set then it first initializes SNTP and then tries to set the time following the method in void ey_init_ntp . it restarts the esp module and returns the current set time.","title":"Return:"},{"location":"APIs/#return_5","text":"It returns the current set system time. char* ey_sntp_date_string(void) This API is used to get the current date and the time string. It returns the date and time through a single character array. The date and time are stored as 'YY-MM-DD HH:MM:SS' in the datestring returned by this function.","title":"Return:"},{"location":"APIs/#return_6","text":"Returns character array storing value of system date and time in the above mentioned format.","title":"Return:"},{"location":"APIs/#location","text":"void ey_populate_isp_location(void) This API is used to fetch information about ISP including its location. Information is received in JSON format. { \"status\": \"success\", \"country\": \"India\", \"countryCode\": \"IN\", \"region\": \"GJ\", \"regionName\": \"Gujarat\", \"city\": \"Ahmedabad\", \"zip\": \"380052\", \"lat\": 23.0276, \"lon\": 72.5871, \"timezone\": \"Asia/Kolkata\", \"isp\": \"Reliance Jio Infocomm Limited\", \"org\": \"RJIL Gujarat LTE SUBSCRIBER PUBLIC\", \"as\": \"AS55836 Reliance Jio Infocomm Limited\", \"query\": \"157.32.130.153\" } This information from the JSON is stored in ey_iot object. ey_iot.isp_country ey_iot.isp_region ey_iot.isp_regionName ey_iot.isp_city ey_iot.isp_zip ey_iot.isp_lat ey_iot.isp_lon ey_iot.isp_timezone ey_iot.isp_org ey_iot.isp_as ey_iot.isp_public_ip","title":"Location"},{"location":"Example/","text":"Example In the previous sections, you have seen that our framework consists of APIs which you can use in the code as per your need. All you have to do is include these functions in your code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. This section consists of an example code that uses our APIs. This example pushes a data to the google Spreadsheet , performs Over-the-Air Updates using encrypted firmware stored in a Github Repo . //------------------------------------------------------------------------------ #include \"ey_iot.h\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ #define SUB_TOPIC \"/ey/001/endpoint\" #define PUB_TOPIC \"/ey/001/server\" #define DELAY_SEC 60 //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_mqtt_rx(void); void my_mqtt_disconnect(void); void my_ota_success(void); void my_ota_fail(void); void my_task_sensor_data_logging(void *p); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); ey_init_ntp(); ey_mqtt_start(); ey_mqtt_subscribe(SUB_TOPIC, 0); ey_populate_isp_location(); xTaskCreate(&my_task_sensor_data_logging, \"my_task_sensor_data_logging\", 8120, NULL, 10, NULL); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); ey_register_callback(EY_MQTT_EVENT_DATA_RX, my_mqtt_rx); ey_register_callback(EY_OTA_EVENT_SUCCESS, my_ota_success); ey_register_callback(EY_OTA_EVENT_FAIL, my_ota_fail); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_mqtt_rx(){ printf(\"SUB_TOPIC: %s\\n\", ey_mqtt_sub_topic); printf(\"SUB_DATA: %s\\n\", ey_mqtt_sub_data); if(strcmp(ey_mqtt_sub_data, \"ota-start\") == 0){ printf(\"%s\\n\", \"OTA Start Command Received\"); ey_mqtt_publish(PUB_TOPIC, \"ota-start-cmd-received\", 0); printf(\"PUB_DATA: %s\\n\", \"ota-start-cmd-received\"); // Start OTA ey_ota_advanced_start(OTA_MODE_FORCED); } } void my_mqtt_disconnect(){ printf(\"USER: MQTT Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_ota_success(){ printf(\"USER: OTA Success\\n\"); ey_mqtt_publish(PUB_TOPIC, \"ota-success\", 0); vTaskDelay(2000 / portTICK_PERIOD_MS); esp_restart(); } void my_ota_fail(){ printf(\"USER: OTA Fail\\n\"); } void my_task_sensor_data_logging(void *p){ long unsigned int start_time = 0, current_time = 0; char sensor_data = 99; start_time = ey_sntp_get_epoch(); while(1){ current_time = ey_sntp_get_epoch(); if((current_time - start_time) >= 10){ // Print Time printf(WHT \"Time: \" RESET); printf(CYN \"%s\\n\" RESET, ey_sntp_date_string()); // Print ISP Location if(ey_iot.isp_loc_status == 1){ printf(WHT \"Location: \" RESET); printf(MAG \"%s, %s, %s\\n\" RESET, ey_iot.isp_city, ey_iot.isp_regionName, ey_iot.isp_country); } // Print Sensor printf(WHT \"Sensor: \" RESET); printf(YEL \"%d\\n\" RESET,sensor_data); ey_push_sensor_data(GOOGLE_SHEET, sensor_data); printf(\"\\n\"); sensor_data--; if(sensor_data == 0){ sensor_data = 99; } start_time = current_time; } } } //------------------------------------------------------------------------------ //------------------------------------------------------------------------------ And below is the demo video that shows the whole working of the above code.","title":"Example Code"},{"location":"Example/#example","text":"In the previous sections, you have seen that our framework consists of APIs which you can use in the code as per your need. All you have to do is include these functions in your code. So, whenever any IoT event occurs the user defined function attached to this event will be executed automatically without having the user call the function explicitly in main() or elsewhere. This section consists of an example code that uses our APIs. This example pushes a data to the google Spreadsheet , performs Over-the-Air Updates using encrypted firmware stored in a Github Repo . //------------------------------------------------------------------------------ #include \"ey_iot.h\" #include \"ey_iot_config.h\" //------------------------------------------------------------------------------ #define SUB_TOPIC \"/ey/001/endpoint\" #define PUB_TOPIC \"/ey/001/server\" #define DELAY_SEC 60 //------------------------------------------------------------------------------ void init_callback(void); void my_wifi_start(void); void my_wifi_disconnect(void); void my_mqtt_rx(void); void my_mqtt_disconnect(void); void my_ota_success(void); void my_ota_fail(void); void my_task_sensor_data_logging(void *p); //------------------------------------------------------------------------------ void app_main(void){ init_callback(); ey_init_nvs(); ey_init_wifi_sta(EY_CONFIG_WIFI_SSID, EY_CONFIG_WIFI_PASS); ey_init_ntp(); ey_mqtt_start(); ey_mqtt_subscribe(SUB_TOPIC, 0); ey_populate_isp_location(); xTaskCreate(&my_task_sensor_data_logging, \"my_task_sensor_data_logging\", 8120, NULL, 10, NULL); } //------------------------------------------------------------------------------ void init_callback(void){ ey_register_callback(EY_WIFI_EVENT_STA_START, my_wifi_start); ey_register_callback(EY_WIFI_EVENT_STA_DISCONNECTED, my_wifi_disconnect); ey_register_callback(EY_MQTT_EVENT_DATA_RX, my_mqtt_rx); ey_register_callback(EY_OTA_EVENT_SUCCESS, my_ota_success); ey_register_callback(EY_OTA_EVENT_FAIL, my_ota_fail); } void my_wifi_start() { printf(\"USER: Wi-Fi Start\\n\"); } void my_wifi_disconnect() { printf(\"USER: Wi-Fi Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_mqtt_rx(){ printf(\"SUB_TOPIC: %s\\n\", ey_mqtt_sub_topic); printf(\"SUB_DATA: %s\\n\", ey_mqtt_sub_data); if(strcmp(ey_mqtt_sub_data, \"ota-start\") == 0){ printf(\"%s\\n\", \"OTA Start Command Received\"); ey_mqtt_publish(PUB_TOPIC, \"ota-start-cmd-received\", 0); printf(\"PUB_DATA: %s\\n\", \"ota-start-cmd-received\"); // Start OTA ey_ota_advanced_start(OTA_MODE_FORCED); } } void my_mqtt_disconnect(){ printf(\"USER: MQTT Disconnect\\n\"); ey_wifi_auto_reconnect(); } void my_ota_success(){ printf(\"USER: OTA Success\\n\"); ey_mqtt_publish(PUB_TOPIC, \"ota-success\", 0); vTaskDelay(2000 / portTICK_PERIOD_MS); esp_restart(); } void my_ota_fail(){ printf(\"USER: OTA Fail\\n\"); } void my_task_sensor_data_logging(void *p){ long unsigned int start_time = 0, current_time = 0; char sensor_data = 99; start_time = ey_sntp_get_epoch(); while(1){ current_time = ey_sntp_get_epoch(); if((current_time - start_time) >= 10){ // Print Time printf(WHT \"Time: \" RESET); printf(CYN \"%s\\n\" RESET, ey_sntp_date_string()); // Print ISP Location if(ey_iot.isp_loc_status == 1){ printf(WHT \"Location: \" RESET); printf(MAG \"%s, %s, %s\\n\" RESET, ey_iot.isp_city, ey_iot.isp_regionName, ey_iot.isp_country); } // Print Sensor printf(WHT \"Sensor: \" RESET); printf(YEL \"%d\\n\" RESET,sensor_data); ey_push_sensor_data(GOOGLE_SHEET, sensor_data); printf(\"\\n\"); sensor_data--; if(sensor_data == 0){ sensor_data = 99; } start_time = current_time; } } } //------------------------------------------------------------------------------ //------------------------------------------------------------------------------ And below is the demo video that shows the whole working of the above code.","title":"Example"},{"location":"Spreadsheet/","text":"Setting up Google Spreadsheet First of all, users need a google account in order to proceed. If you do not have it already, kindly create one. Open Google Sheets: Google Sheets Create a blank sheet and name it as per your choice. Here we have named it as Sensor_1 . Note the difference between the complete spreadsheet name which is ey_IoT_googleDb in this case and individual sheet name which is Sensor_1 . Write headings for two columns, Timestamp , value . Timestamp indicates the date and time at which sensor readings will be updated in the subsequent columns. This column will be updated automatically when a reading is send to the sheet via an HTTP GET request. value is the reading itself. We can have multiple values columns for multiple sensor readings which is explained further in this document. Go to Tools -> Script editor . to open a new tab with the code editor window. This will open a new tab in your browser, which is the Google Apps Script editor window: Here, we will be writing some script (see https://developers.google.com/apps-script) for extending our sheet\u2019s functionality. The script will be processing HTTP GET (more at https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) requests and forwarding the data passed as parameters to the sheet, and plots live sensor readings on chart. By default, it\u2019ll open with a single Google Script file ( code.gs ) and a default code block, myFunction() : For this project, you will have two files: Code.gs and Index.html . Copy and paste below mentioned code in Code.gs file. function doGet(e){ // open the spreadsheet var ss = SpreadsheetApp.getActive(); // use the 'id' parameter to differentiate between sheet var sheet = ss.getSheetByName(e.parameter[\"id\"]); // extract headers // getRange accepts row, col, number_of_rows and num_of_cols as argument // getLastColumn returns the position of the last column that has content var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]; // store the position of the last row var lastRow = sheet.getLastRow(); var cell = sheet.getRange('a1'); var col = 0; var d = new Date(); for (i in headers){ // loop through the headers and if a parameter name matches the header name insert the value if (headers[i] == \"Timestamp\") { val = d.toDateString() + \", \" + d.toLocaleTimeString(); } else { val = e.parameter[headers[i]]; } // append data to the last row cell.offset(lastRow, col).setValue(val); col++; } //Checks the last logged data in the sheet, sends email if data greater is than threshold var sh = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var lastRow = sh.getLastRow(); var lastCol = sh.getLastColumn(); var data = sh.getRange(lastRow, lastCol).getValue(); if(data > 100) //set your threshold here { var to = \"abc@gmail.com\"; //write your email id here var message = \"Warning! Temperature has crossed the threshold value. Right now, the temperature is \" + data + \" \\n\" ; MailApp.sendEmail(to, \" alert! \", message); } //////////// return ContentService.createTextOutput('success'); } // function to create menu function onOpen() { SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp. .createMenu('Live plot') //Name of the created menu in the spreadsheet. .addItem('Chart', 'openDialog') .addToUi(); } // function that calls html file to display in dialog box function openDialog() { var html = HtmlService.createHtmlOutputFromFile('Index') //HTML file name .setWidth(1000) //you can change dimensions of dialog box from here .setHeight(700) SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp. .showModalDialog(html, 'Chart'); } Changes to be made in Code.gs: Change threshold value as per your requirement. Give the mail id on which you want to receive email. The text message, which will be mailed to the specified mail id when threshold readings are violated, can also be altered as per user's requirement. Now we will be creating a html file . To create a html file , from the script editor window itself, Go to File -> New -> HTML file . Name that file as 'Index' , copy and paste the below mentioned code in that file . <!DOCTYPE html> <html> <head> <title>Line Chart with Google Sheets</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta charset=\"utf-8\"> <!-- load jQuery --> <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\" integrity=\"sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=\" crossorigin=\"anonymous\"></script> <!-- load Highcharts, Highcharts-more, and modules --> <script src=\"https://code.highcharts.com/highcharts.js\"></script> <script src=\"https://code.highcharts.com/highcharts-more.js\"></script> <script src=\"https://code.highcharts.com/modules/data.js\"></script> <script src=\"https://code.highcharts.com/modules/exporting.js\"></script> <script src=\"https://code.highcharts.com/modules/boost.js\"></script> </head> <body> <div id=\"container\" style=\"width:100%; height:600px;\"></div> <script> $(function() { Highcharts.chart('container', { chart: { zoomType: 'x' }, title: { text: 'Real Time Plot of Sensor values' }, data: { googleSpreadsheetKey: '1zZ****************************0Y', // add your google spreadsheet key here enablePolling: true, dataRefreshRate: 1 }, }); }); </script> </body> </html> Changes to be made in Index.html Change googleSpreadsheetKey Go to your spreadsheet, and check its URL, it would be something like https://docs.google.com/spreadsheets/d/{googleSpreadsheetKey}/edit#gid=0 Extract googleSpreadsheetKey from URL and edit in Index.html . After all editing in the code, Go to Publish -> Deploy as web app . You will get dialog box as below. Make the app accessible to Anyone . Execute the app as Me and click on Deploy . Then Authorization required dialog box will appear. Click on Review Permissions . Choose your Google account. Then Google will asks for verification and you will be getting a window like given below. So click on Advanced . Scroll down and click on Go to ey_IoT_script (unsafe) . Then click on Allow . You will get a dialog box like this below. Copy the link that is provided to you, at this step , and click on OK The link will look like this, https://script.google.com/macros/s/{your-sheet-id}/exec In the previous code, I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value=100 Note : Headers in the spreadsheet ( value in this case) and the query parameters in your URL must be same. Also id is nothing but name of the sheet which in this case is Sensor_1. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, check our sheet. Whoa! . You have successfully added a data in the sheet. Now if you observe, Live plot option is added in the menu bar. This is because when we run that above mentioned URL , google script that we wrote is executed. That script includes the code to fill data in the sheet and adds a menu in the menu bar in where you can see the live plot of your sensor values. Now before you observe the graph in the Live plot menu , you need to publish your Google spreadsheet as well. Change the sharing setting of your sheet. Change your settings to Anyone with the link . Now Go to File -> Publish to the web . Click on publish . So, now you can observe the real time plot of your sensor values in the Live plot menu. So just like above image a graph with the plotted values will be seen. X axis is the first column timestamp and Y axis are the sensor readings. Since only one column is there only one reading is present. You may have observed that the readings appear pretty squeezed between certain intervals. To make them visible distinctly we can zoom on the graph. To do that, drag the cursor across the region which you want to zoom and the same interval will be visible as shown in image below. Notice the difference between the 20 Jun region before and after. This process of zooming can be repeated several times until the single readings are distinctly visible. To view the normal graph again and to exit zoom press the 'Reset Zoom' button. The graph can be viewed in full screen, can be converted into various image formats or printed as well. For that press the menu on top right side and a dialog box as shown below will appear. User can select suitable option from that. What if you wanted to upload more than one sensor readings to spreadsheet? In the tutorial above, you have come across to upload one sensor reading named 'value' to the spreadsheet. Now if you wanted to upload more than one sensor readings to the spreadsheet, what would you do? Let's say you wanted to upload 3 sensor readings named value1 , value2 , value3 to the spreadsheet. Just follow below mentioned steps. Step 1 :* In the same spreadsheet, make 3 headers in your sheet other than Timestamp as value1 , value2 , value3*** . Step 2 : Code.gs and Index.html will be same. All procedure will be same as we did above. Step 3 : Now recall the URL that you get when you published your script and deployed it as web app. It was something like this:- https://script.google.com/macros/s/{your-sheet-id}/exec In the code.gs , I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value1 , value2 , value3 . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value1=100&value2=50&value3=100 Note : Headers in the spreadsheet ( value1 , value2 , value3 in this case) should be same as query parameters in your URL. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, we should check our sheet? Whoa! . You have successfully uploaded 3 sensors readings on the sheet. So in this way, you can upload as many sensor readings you want to the spreadsheet by just changing the headers in the sheet and some query parameters in the URL. That's all for this section. Thank you!","title":"Setting up Google Spreadsheet"},{"location":"Spreadsheet/#setting-up-google-spreadsheet","text":"First of all, users need a google account in order to proceed. If you do not have it already, kindly create one. Open Google Sheets: Google Sheets Create a blank sheet and name it as per your choice. Here we have named it as Sensor_1 . Note the difference between the complete spreadsheet name which is ey_IoT_googleDb in this case and individual sheet name which is Sensor_1 . Write headings for two columns, Timestamp , value . Timestamp indicates the date and time at which sensor readings will be updated in the subsequent columns. This column will be updated automatically when a reading is send to the sheet via an HTTP GET request. value is the reading itself. We can have multiple values columns for multiple sensor readings which is explained further in this document. Go to Tools -> Script editor . to open a new tab with the code editor window. This will open a new tab in your browser, which is the Google Apps Script editor window: Here, we will be writing some script (see https://developers.google.com/apps-script) for extending our sheet\u2019s functionality. The script will be processing HTTP GET (more at https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) requests and forwarding the data passed as parameters to the sheet, and plots live sensor readings on chart. By default, it\u2019ll open with a single Google Script file ( code.gs ) and a default code block, myFunction() : For this project, you will have two files: Code.gs and Index.html . Copy and paste below mentioned code in Code.gs file. function doGet(e){ // open the spreadsheet var ss = SpreadsheetApp.getActive(); // use the 'id' parameter to differentiate between sheet var sheet = ss.getSheetByName(e.parameter[\"id\"]); // extract headers // getRange accepts row, col, number_of_rows and num_of_cols as argument // getLastColumn returns the position of the last column that has content var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]; // store the position of the last row var lastRow = sheet.getLastRow(); var cell = sheet.getRange('a1'); var col = 0; var d = new Date(); for (i in headers){ // loop through the headers and if a parameter name matches the header name insert the value if (headers[i] == \"Timestamp\") { val = d.toDateString() + \", \" + d.toLocaleTimeString(); } else { val = e.parameter[headers[i]]; } // append data to the last row cell.offset(lastRow, col).setValue(val); col++; } //Checks the last logged data in the sheet, sends email if data greater is than threshold var sh = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var lastRow = sh.getLastRow(); var lastCol = sh.getLastColumn(); var data = sh.getRange(lastRow, lastCol).getValue(); if(data > 100) //set your threshold here { var to = \"abc@gmail.com\"; //write your email id here var message = \"Warning! Temperature has crossed the threshold value. Right now, the temperature is \" + data + \" \\n\" ; MailApp.sendEmail(to, \" alert! \", message); } //////////// return ContentService.createTextOutput('success'); } // function to create menu function onOpen() { SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp. .createMenu('Live plot') //Name of the created menu in the spreadsheet. .addItem('Chart', 'openDialog') .addToUi(); } // function that calls html file to display in dialog box function openDialog() { var html = HtmlService.createHtmlOutputFromFile('Index') //HTML file name .setWidth(1000) //you can change dimensions of dialog box from here .setHeight(700) SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp. .showModalDialog(html, 'Chart'); }","title":"Setting up Google Spreadsheet"},{"location":"Spreadsheet/#changes-to-be-made-in-codegs","text":"Change threshold value as per your requirement. Give the mail id on which you want to receive email. The text message, which will be mailed to the specified mail id when threshold readings are violated, can also be altered as per user's requirement. Now we will be creating a html file . To create a html file , from the script editor window itself, Go to File -> New -> HTML file . Name that file as 'Index' , copy and paste the below mentioned code in that file . <!DOCTYPE html> <html> <head> <title>Line Chart with Google Sheets</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta charset=\"utf-8\"> <!-- load jQuery --> <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\" integrity=\"sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=\" crossorigin=\"anonymous\"></script> <!-- load Highcharts, Highcharts-more, and modules --> <script src=\"https://code.highcharts.com/highcharts.js\"></script> <script src=\"https://code.highcharts.com/highcharts-more.js\"></script> <script src=\"https://code.highcharts.com/modules/data.js\"></script> <script src=\"https://code.highcharts.com/modules/exporting.js\"></script> <script src=\"https://code.highcharts.com/modules/boost.js\"></script> </head> <body> <div id=\"container\" style=\"width:100%; height:600px;\"></div> <script> $(function() { Highcharts.chart('container', { chart: { zoomType: 'x' }, title: { text: 'Real Time Plot of Sensor values' }, data: { googleSpreadsheetKey: '1zZ****************************0Y', // add your google spreadsheet key here enablePolling: true, dataRefreshRate: 1 }, }); }); </script> </body> </html>","title":"Changes to be made in Code.gs:"},{"location":"Spreadsheet/#changes-to-be-made-in-indexhtml","text":"Change googleSpreadsheetKey Go to your spreadsheet, and check its URL, it would be something like https://docs.google.com/spreadsheets/d/{googleSpreadsheetKey}/edit#gid=0 Extract googleSpreadsheetKey from URL and edit in Index.html . After all editing in the code, Go to Publish -> Deploy as web app . You will get dialog box as below. Make the app accessible to Anyone . Execute the app as Me and click on Deploy . Then Authorization required dialog box will appear. Click on Review Permissions . Choose your Google account. Then Google will asks for verification and you will be getting a window like given below. So click on Advanced . Scroll down and click on Go to ey_IoT_script (unsafe) . Then click on Allow . You will get a dialog box like this below. Copy the link that is provided to you, at this step , and click on OK The link will look like this, https://script.google.com/macros/s/{your-sheet-id}/exec In the previous code, I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value=100 Note : Headers in the spreadsheet ( value in this case) and the query parameters in your URL must be same. Also id is nothing but name of the sheet which in this case is Sensor_1. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, check our sheet. Whoa! . You have successfully added a data in the sheet. Now if you observe, Live plot option is added in the menu bar. This is because when we run that above mentioned URL , google script that we wrote is executed. That script includes the code to fill data in the sheet and adds a menu in the menu bar in where you can see the live plot of your sensor values. Now before you observe the graph in the Live plot menu , you need to publish your Google spreadsheet as well. Change the sharing setting of your sheet. Change your settings to Anyone with the link . Now Go to File -> Publish to the web . Click on publish . So, now you can observe the real time plot of your sensor values in the Live plot menu. So just like above image a graph with the plotted values will be seen. X axis is the first column timestamp and Y axis are the sensor readings. Since only one column is there only one reading is present. You may have observed that the readings appear pretty squeezed between certain intervals. To make them visible distinctly we can zoom on the graph. To do that, drag the cursor across the region which you want to zoom and the same interval will be visible as shown in image below. Notice the difference between the 20 Jun region before and after. This process of zooming can be repeated several times until the single readings are distinctly visible. To view the normal graph again and to exit zoom press the 'Reset Zoom' button. The graph can be viewed in full screen, can be converted into various image formats or printed as well. For that press the menu on top right side and a dialog box as shown below will appear. User can select suitable option from that.","title":"Changes to be made in Index.html"},{"location":"Spreadsheet/#what-if-you-wanted-to-upload-more-than-one-sensor-readings-to-spreadsheet","text":"In the tutorial above, you have come across to upload one sensor reading named 'value' to the spreadsheet. Now if you wanted to upload more than one sensor readings to the spreadsheet, what would you do? Let's say you wanted to upload 3 sensor readings named value1 , value2 , value3 to the spreadsheet. Just follow below mentioned steps. Step 1 :* In the same spreadsheet, make 3 headers in your sheet other than Timestamp as value1 , value2 , value3*** . Step 2 : Code.gs and Index.html will be same. All procedure will be same as we did above. Step 3 : Now recall the URL that you get when you published your script and deployed it as web app. It was something like this:- https://script.google.com/macros/s/{your-sheet-id}/exec In the code.gs , I mentioned about parameters. I am using the parameter id to differentiate between sheets. At the same time, if a parameter name matches with a header name, the script would be writing to that column. The header in my sheet, other than Timestamp is value1 , value2 , value3 . So would be the parameters. A sample URL containing the query parameters is, https://script.google.com/macros/s/{your-sheet-id}/exec?id=Sensor_1&value1=100&value2=50&value3=100 Note : Headers in the spreadsheet ( value1 , value2 , value3 in this case) should be same as query parameters in your URL. When the URL is pasted in the address bar of the browser and invoked, Something happened. Maybe, we should check our sheet? Whoa! . You have successfully uploaded 3 sensors readings on the sheet. So in this way, you can upload as many sensor readings you want to the spreadsheet by just changing the headers in the sheet and some query parameters in the URL. That's all for this section. Thank you!","title":"What if you wanted to upload more than one sensor readings to spreadsheet?"},{"location":"config/","text":"Configuring e-Yantra IoT Framework ey_iot_config.h file present in the framework is used to configure various services offered by the framework. Following is a sample of ey_iot_config.h . User can change it according to their usage. #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- MQTT --------- #define EY_CONFIG_MQTT_SERVER_URL \"mqtt://broker.mqttdashboard.com\" #define EY_CONFIG_MQTT_SERVER_PORT 1883 #define EY_SUB_TOPIC_LEN 100 #define EY_SUB_DATA_LEN 100 //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- OTA --------- #define EY_REMOTE_OTA_URL \"https://raw.githubusercontent.com/username/reponame/master/hello-world.bin\" #define EY_REMOTE_OTA_TIMEOUT_MS 60000 //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif /* __EY_IOT_CONFIG_H__ */","title":"Configure"},{"location":"config/#configuring-e-yantra-iot-framework","text":"ey_iot_config.h file present in the framework is used to configure various services offered by the framework. Following is a sample of ey_iot_config.h . User can change it according to their usage. #ifndef __EY_IOT_CONFIG_H__ #define __EY_IOT_CONFIG_H__ //--------- Wi-Fi --------- #define EY_CONFIG_WIFI_SSID \"my-wifi-ssid\" #define EY_CONFIG_WIFI_PASS \"my-wifi-password\" //--------- MQTT --------- #define EY_CONFIG_MQTT_SERVER_URL \"mqtt://broker.mqttdashboard.com\" #define EY_CONFIG_MQTT_SERVER_PORT 1883 #define EY_SUB_TOPIC_LEN 100 #define EY_SUB_DATA_LEN 100 //--------- Encryption --------- #define EY_ENCRYP_XOR_KEY 'e' //--------- NTP --------- #define EY_NTP_SERVER \"pool.ntp.org\" #define EY_NTP_TIMEZONE \"UTC-5:30\" //--------- OTA --------- #define EY_REMOTE_OTA_URL \"https://raw.githubusercontent.com/username/reponame/master/hello-world.bin\" #define EY_REMOTE_OTA_TIMEOUT_MS 60000 //--------- Database --------- #define SPREADSHEET_ID \"unique-spreadsheet-id\" #endif /* __EY_IOT_CONFIG_H__ */","title":"Configuring e-Yantra IoT Framework"}]}